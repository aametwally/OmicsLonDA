pwr.t2n.test(n1=30, n2=150, sig.level = 0.05, alternative = "two.sided", power = 0.8)
library(pwr)
120*0.18
22/1.15
78/1.15
26/276
20/1.15
70/1.15
pwr.t2n.test(n1=18, n2=61, sig.level = 0.05/30, alternative = "two.sided", power = 0.8)
pwr.t2n.test(n1=18, n2=61, sig.level = 0.05, alternative = "two.sided", power = 0.8)
pwr.t2n.test(n1=18, n2=61, sig.level = 0.05/10, alternative = "two.sided", power = 0.8)
pwr.t2n.test(n1=18, n2=61, sig.level = 0.05/5, alternative = "two.sided", power = 0.8)
120*0.18
120*0.72
120*0.82
90/1.15
pwr.t2n.test(n1=18, n2=78, sig.level = 0.05, alternative = "two.sided", power = 0.8)
78+18
150*0.2
160*20
160*.20
170*.20
170*.80
130/1.15
30/1.15
pwr.t2n.test(n1=113, n2=26, sig.level = 0.05, alternative = "two.sided", power = 0.8)
library("pwr")
pwr.t2n.test(n1=113, n2=26, sig.level = 0.05, alternative = "two.sided", power = 0.8)
pwr.t2n.test(n1=113, n2=26, sig.level = 0.05/30, alternative = "two.sided", power = 0.8)
pwr.t2n.test(n1=113, n2=26, sig.level = 0.05/20, alternative = "two.sided", power = 0.8)
pwr.t2n.test(n1=113, n2=26, sig.level = 0.05/10, alternative = "two.sided", power = 0.8)
113+26
pwr.t2n.test(n1=113, n2=26, sig.level = 0.05/10, alternative = "two.sided", power = 0.8)
library("pwr")
pwr.t2n.test(n1=90, n2=38, sig.level = 0.05/10, alternative = "two.sided", power = 0.8)
pwr.t2n.test(n1=90, n2=38, sig.level = 0.05/30, alternative = "two.sided", power = 0.8)
pwr.t2n.test(n1=77, n2=34, sig.level = 0.05/30, alternative = "two.sided", power = 0.8)
install.packages("metalonda")
install.packages("MetaLonDA")
library("metalonda")
library("MetaLonDA")
?metalonda
version
?curveFitting
(250/280)*log2(250/280)+(20/280)*log2(20/280)+(10/280)*log2(10/280)
(250/280)
install.packages("MetaLonDA")
library(MetaLonDA)
?metalonda
?metalonda
?metalondaAll
library(MetaLonDA)
?metalondaAll
ls
ls()
memory.size(max = TRUE)
memory.limit(size = NA)
install.packages("MetaLonDA")
library(MetaLonDA)
?metalonda
?remove.packages()
remove.packages("MetaLonDA")
library(MetaLonDA)
?metalonda
install.packages("MetaLonDA")
install.packages("MetaLonDA")
library("MetaLonDA")
?metalonda
?metalondaAll
rref <- bibentry(
bibtype = "Manual",
title = "R: A Language and Environment for Statistical Computing",
author = person("R Core Team"),
organization = "R Foundation for Statistical Computing",
address = "Vienna, Austria",
year = 2014,
url = "https://www.R-project.org/")
rref
?citation
citation("MetaLonDA")
citation("ggplot2")
citation("deseq2")
library("deseq2")
library(deseq2)
library(DESeq2)
citation(DESeq2)
library(DESeq2)
citation(DESeq2)
citation(deseq2)
?`DESeq2-package`
cran_downloads(when = "last-week", packages = c("ggplot2", "httr"))
library(cranlogs)
cran_downloads(when = "last-week", packages = c("ggplot2", "httr"))
cran_downloads(when = "last-week", packages = c("MetaLonDA"))
x=c(1:10)
y=c(1:10)
x
y
plot(x,y)
plot(x,y)
plot(x,y, col="red")
library("phyloseq"); packageVersion("phyloseq")
cran_downloads(when = "last-week", packages = c("ggplot2", "httr"))
library(cranlogs)
cran_downloads(when = "last-week", packages = c("MetaLonDA"))
install.packages("rnoaa")
library('rnoaa')
ncdc_locs(locationcategoryid='CITY', sortfield='name', sortorder='desc')
2\. ncdc_stations(datasetid='GHCND', locationid='FIPS:12017', stationid='GHCND:USC00084289', config=httr::verbose())
ncdc_stations(datasetid='GHCND', locationid='FIPS:12017', stationid='GHCND:USC00084289', config=httr::verbose())
any(grepl("^\\.Renviron", list.files("~", all.files = TRUE)))
any(grepl("^\\.Renviron", list.files("~", all.files = TRUE)))
Sys.getenv("noaakey")
library(devtools)
install.packages("devtools")
install.packages("git2r")
devtools
devtools()
library(devtools)
library(devtools)
200*300
200+300
200*300
devtools
library
library(devtools)
install.packages(devtools)
install.packages("devtools")
library(processx)
library(devtools)
install.packages()
install.packages("devtools")
library(pkgload)
install.packages()
install.packages("pkgload")
install.packages("devtools")
install.packages("devtools",
repos = c("http://rstudio.org/_packages",
"http://cran.rstudio.com"))
install.packages("devtools", repos = c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("devtools", repos = c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("devtools", repos = c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("devtools", repos = c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("pkgload", repos = c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
setwd("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/OmicsLonDA_dev/OmicsLonDA_github/")
processx
install.packages(processx )
install.packages("processx")
library(processx)
help(processx)
install.packages("pkgload", repos = c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("devtools", repos = c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(devtools)
getwd()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::document()
devtools::document()
install_github("aametwally/OmicsLonDA", ref = "master")
library(OmicsLonDA)
load("data/simulatedDataset_diff_OmicsLonDA_normalized_1000.RData", envir = parent.frame(), verbose = FALSE)
head(diff_simulatedDataset_norm[[1]])
points = seq(1, 10, length.out = 100)
getwd()
output.omicslonda_diff_1 = omicslonda(formula = normalizedCount ~ Time, df = diff_simulatedDataset_norm[[1]], n.perm = 1000,
fit.method = "ssgaussian", points = points,
text = "sim_f1", parall = FALSE, pvalue.threshold = 0.05,
adjust.method = "BH", col = c("blue", "green"),
prefix = "OmicsLonDA_clr_f1", ylabel = "CLR-NormalizedCount",
DrawTestStatDist = FALSE, time.unit = "days")
output.omicslonda_diff_1 = omicslonda(formula = normalizedCount ~ Time, df = diff_simulatedDataset_norm[[1]], n.perm = 1000,
fit.method = "ssgaussian", points = points,
text = "sim_f1", parall = FALSE, pvalue.threshold = 0.05,
adjust.method = "BH", col = c("blue", "green"),
prefix = "OmicsLonDA_clr_f1", ylabel = "CLR-NormalizedCount",
DrawTestStatDist = FALSE, time.unit = "days")
