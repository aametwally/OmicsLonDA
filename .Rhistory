setwd("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/OmicsLonDA_dev/OmicsLonDA_github/")
library(ggplot2)
library(gss)
library(plyr)
library(pracma)
library(parallel)
library(doParallel)
library(zoo)
library(pheatmap)
library(viridis)
source("R/OmicsLonDA.R")
source("R/CurveFitting.R")
source("R/Visualization.R")
source("R/Permutation.R")
source("R/Normalization.R")
load("simulatedDataset_diff_OmicsLonDA_optimized_normalized.RData", envir = parent.frame(), verbose = FALSE)
load("simulatedDataset_diff_OmicsLonDA_normalized.RData", envir = parent.frame(), verbose = FALSE)
load("data/simulatedDataset_diff_OmicsLonDA_normalized.RData", envir = parent.frame(), verbose = FALSE)
load("data/simulatedDataset_diff_OmicsLonDA_1000.RData", envir = parent.frame(), verbose = FALSE)
load("data/simulatedDataset_diff_OmicsLonDA_1000.RData", envir = parent.frame(), verbose = FALSE)
load("data/simulatedDataset_nondiff_OmicsLonDA_1000.RData", envir = parent.frame(), verbose = FALSE)
load("data/simulatedDataset_diff_OmicsLonDA_normalized_1000.RData", envir = parent.frame(), verbose = FALSE)
points = seq(1, 200, length.out = 200)
source("R/OmicsLonDA_Evaluation.R")
points = seq(1, 200, length.out = 200)
evaluation_summary_diff = automateEval_OmicsLonDA(data = diff_simulatedDataset_norm[1-2], n.perm = 100, points = points,
pvalue_threshold = 0.05, prefix = "Thu_SU_diff_noSubjRandom_normalized_all")
evaluation_summary_nondiff_f1_f2 = automateEval_OmicsLonDA(data = diff_simulatedDataset_norm[1:2], n.perm = 100, points = points,
pvalue_threshold = 0.05, prefix = "Thu_SU_diff_noSubjRandom_normalized_1_2")
head(diff_simulatedDataset_norm[[1]])
View(diff_simulatedDataset_norm[[1]])
output.omicslonda_diff_1 = omicslonda(formula = Count ~ Time, df = diff_simulatedDataset_norm[[1]], n.perm = 50,
fit.method = "ssgaussian", points = points,
text = "sim_f1", parall = FALSE, pvalue.threshold = 0.05,
adjust.method = "BH", col = c("blue", "green"),
prefix = "OmicsLonDA_clr_f1", ylabel = "CLR-NormalizedCount",
DrawTestStatDist = FALSE, time.unit = "days")
output.omicslonda_diff_1 = omicslonda(formula = normalizedCount ~ Time, df = diff_simulatedDataset_norm[[1]], n.perm = 50,
fit.method = "ssgaussian", points = points,
text = "sim_f1", parall = FALSE, pvalue.threshold = 0.05,
adjust.method = "BH", col = c("blue", "green"),
prefix = "OmicsLonDA_clr_f1", ylabel = "CLR-NormalizedCount-2",
DrawTestStatDist = FALSE, time.unit = "days")
head(diff_simulatedDataset[[1]])
head(diff_simulatedDataset_norm[[1]])
library(ggplot2)
library(gss)
library(plyr)
library(pracma)
library(parallel)
library(doParallel)
library(zoo)
library(pheatmap)
library(viridis)
setwd("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/OmicsLonDA_dev/OmicsLonDA_github/")
source("R/OmicsLonDA.R")
source("R/CurveFitting.R")
source("R/Visualization.R")
source("R/Permutation.R")
source("R/Normalization.R")
load("data/simulatedDataset_diff_OmicsLonDA_normalized_1000.RData", envir = parent.frame(), verbose = FALSE)
points = seq(1, 200, length.out = 200)
head(diff_simulatedDataset_norm[[1]])
source("R/OmicsLonDA.R")
source("R/CurveFitting.R")
source("R/Visualization.R")
source("R/Permutation.R")
source("R/Normalization.R")
setwd("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/OmicsLonDA_dev/OmicsLonDA_github/")
formula = normalizedCount ~ Time
df = diff_simulatedDataset_norm[[1]]
n.perm = 50
fit.method = "ssgaussian"
points = points
text = "sim_f1"
parall = FALSE
value.threshold = 0.05
adjust.method = "BH"
col = c("blue", "green")
prefix = "OmicsLonDA_clr_f1-2"
ylabel = "CLR-NormalizedCount"
DrawTestStatDist = FALSE
time.unit = "days"
if (!dir.exists(prefix)){
dir.create(file.path(prefix))
}
Group = as.character(df$Group)
group.levels = sort(unique(Group))
print(group.levels)
if(length(group.levels) > 2){
stop("You have more than two phenotypes.")
} else if(length(group.levels) < 2){
stop("You have less than two phenotypes.")
}
gr.1 = as.character(group.levels[1])
gr.2 = as.character(group.levels[2])
levels(df$Group) = c(levels(df$Group), "0", "1")
df$Group[which(df$Group == gr.1)] = 0
df$Group[which(df$Group == gr.2)] = 1
df$Count = df$Count + 1e-8
visualizeFeature(df, text, group.levels, unit = time.unit, ylabel = ylabel, col = col, prefix = prefix)
group.0 = df[df$Group == 0, ]
group.1 = df[df$Group == 1, ]
points.min = max(sort(group.0$Time)[1], sort(group.1$Time)[1])
points.max = min(sort(group.0$Time)[length(group.0$Time)], sort(group.1$Time)[length(group.1$Time)])
points = points[which(points >= points.min & points <= points.max)]
cat("points.min = ", points.min, "\n")
cat("points.max = ", points.max, "\n")
cat("points = ", points, "\n")
cat("Start Curve Fitting \n")
if (fit.method == "ssnbinomial")
{
cat("Fitting: Smoothing Spline Negative-Binomial Regression  \n")
model = tryCatch({
curveFitting(formula = formula, df, method= "ssnbinomial", points)
},  error = function(err) {
print(paste("ERROR in gss = ", err, sep=""));
return("ERROR")
})
} else if (fit.method == "ssgaussian")
{
cat("Fitting: Smoothing Spline Gaussian Regression \n")
model = tryCatch({
curveFitting(formula = formula, df, method= "ssgaussian", points)
},  error = function(err) {
print(paste("ERROR in gss = ", err, sep=""));
return("ERROR")
})
} else if (fit.method == "lowess")
{
cat("Fitting: LOWESS \n")
model = curveFitting(formula = formula, df = df, method= "lowess", points)
} else {
cat("You have entered unsupported fitting method\n")
quit()
}
visualizeFeatureSpline(df, model, fit.method, text, group.levels, unit = time.unit, ylabel = ylabel,
col = col, prefix = prefix)
stat = testStat(model)$testStat
perm  = permutationMC_fixPoints(formula = formula, perm.dat = df, n.perm = n.perm, method = fit.method, points = points, parall = parall, prefix = prefix)
test.stat.prem = testStatPermutation(perm)
t1 = do.call(rbind, test.stat.prem)
t2 = unlist(t1[,1])
t3 = as.vector(t2)
length(t3)
pvalue.test.stat = sapply(1:(length(points)-1), function(i){
if(stat[i]>=0)
{
sum(t3 > stat[i])/length(t3)
}
else if(stat[i]<0)
{
sum(t3 < stat[i])/length(t3)
}
} )
adjusted.pvalue = p.adjust(pvalue.test.stat, method = adjust.method)
if(DrawTestStatDist)
{
##  Visualize AR empirical distribution for the null distribution
visualizeARHistogram2(t3, text, fit.method, prefix = prefix, modelStat = stat)
}
interval = findSigInterval2(adjusted.pvalue, threshold = pvalue.threshold, sign = sign(stat))
pvalue.threshold = 0.05
interval = findSigInterval2(adjusted.pvalue, threshold = pvalue.threshold, sign = sign(stat))
st = points[interval$start]
en = points[interval$end + 1]
if(length(st) > 0)
{
## Visualize sigificant area
visualizeArea(aggregate.df, model, fit.method, st, en, text, group.levels, unit = time.unit, ylabel = ylabel,
col = col, prefix = prefix)
}
interval.start = points[-length(points)]
interval.end = points[-1]
dominant = sign(stat)
dominant[which(dominant == 1)] = gr.1
dominant[which(dominant == -1)] = gr.2
avg.mod0.count = rollapply(model$dd.0$Count, 2, mean)
avg.mod1.count = rollapply(model$dd.1$Count, 2, mean)
foldChange = avg.mod0.count/avg.mod1.count
output.details = list(feature = rep(text, length(interval.start)),
interval.start = interval.start, interval.end = interval.end,
avg.mod0.count = avg.mod0.count, avg.mod1.count = avg.mod1.count,
foldChange = foldChange, #log2FoldChange = log2FoldChange,
testStat = stat, testStat.abs = abs(stat), testStat.sign = sign(stat), dominant = dominant,
intervals.pvalue = pvalue.test.stat, adjusted.pvalue = adjusted.pvalue, points = points)
output.summary = data.frame(feature = rep(text, length(interval$start)), start = st, end = en,
dominant = interval$dominant, pvalue = interval$pvalue)
feature.summary = as.data.frame(do.call(cbind, output.details), stringsAsFactors = FALSE)
write.csv(feature.summary, file = sprintf("%s/Feature_%s_Summary_%s.csv", prefix, text, fit.method), row.names = FALSE)
feature.summary
View(feature.summary)
feature.summary = as.data.frame(do.call(cbind, output.details), stringsAsFactors = FALSE)
do.call(cbind, output.details)
output.details
dim(output.details)
length(output.details)
length(output.details$feature)
length(output.details$interval.start)
length(output.details$interval.end)
length(output.details$avg.mod0.count)
length(output.details$avg.mod1.count)
length(output.details$points)
length(output.details$adjusted.pvalue)
length(output.details$intervals.pvalue)
output.details = list(feature = rep(text, length(interval.start)),
interval.start = interval.start, interval.end = interval.end,
avg.mod0.count = avg.mod0.count, avg.mod1.count = avg.mod1.count,
foldChange = foldChange, #log2FoldChange = log2FoldChange,
testStat = stat, testStat.abs = abs(stat), testStat.sign = sign(stat), dominant = dominant,
intervals.pvalue = pvalue.test.stat, adjusted.pvalue = adjusted.pvalue)
output.summary = data.frame(feature = rep(text, length(interval$start)), start = st, end = en,
dominant = interval$dominant, pvalue = interval$pvalue)
feature.summary = as.data.frame(do.call(cbind, output.details), stringsAsFactors = FALSE)
write.csv(feature.summary, file = sprintf("%s/Feature_%s_Summary_%s.csv", prefix, text, fit.method), row.names = FALSE)
cat("\n\n")
return(list(detailed = output.details, summary = output.summary))
library(ggplot2)
library(gss)
library(plyr)
library(pracma)
library(parallel)
library(doParallel)
library(zoo)
library(pheatmap)
library(viridis)
setwd("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/OmicsLonDA_dev/OmicsLonDA_github/")
source("R/OmicsLonDA.R")
source("R/CurveFitting.R")
source("R/Visualization.R")
source("R/Permutation.R")
source("R/Normalization.R")
load("data/simulatedDataset_diff_OmicsLonDA_normalized_1000.RData", envir = parent.frame(), verbose = FALSE)
points = seq(1, 200, length.out = 200)
head(diff_simulatedDataset_norm[[1]])
output.omicslonda_diff_1 = omicslonda(formula = normalizedCount ~ Time, df = diff_simulatedDataset_norm[[1]], n.perm = 50,
fit.method = "ssgaussian", points = points,
text = "sim_f1", parall = FALSE, pvalue.threshold = 0.05,
adjust.method = "BH", col = c("blue", "green"),
prefix = "OmicsLonDA_clr_f1-2", ylabel = "CLR-NormalizedCount",
DrawTestStatDist = FALSE, time.unit = "days")
source("R/OmicsLonDA.R")
source("R/CurveFitting.R")
source("R/Visualization.R")
source("R/Permutation.R")
source("R/Normalization.R")
load("data/simulatedDataset_diff_OmicsLonDA_normalized_1000.RData", envir = parent.frame(), verbose = FALSE)
points = seq(1, 200, length.out = 200)
head(diff_simulatedDataset_norm[[1]])
output.omicslonda_diff_1 = omicslonda(formula = normalizedCount ~ Time, df = diff_simulatedDataset_norm[[1]], n.perm = 50,
fit.method = "ssgaussian", points = points,
text = "sim_f1", parall = FALSE, pvalue.threshold = 0.05,
adjust.method = "BH", col = c("blue", "green"),
prefix = "OmicsLonDA_clr_f1-2", ylabel = "CLR-NormalizedCount",
DrawTestStatDist = FALSE, time.unit = "days")
library(ggplot2)
library(gss)
library(plyr)
library(pracma)
library(parallel)
library(doParallel)
library(zoo)
library(pheatmap)
library(viridis)
setwd("/Users/ahmedmetwally/Box Sync/Ahmed Metwally's Files/Stanford/OmicsLonDA_dev/OmicsLonDA_github/")
source("R/OmicsLonDA.R")
source("R/CurveFitting.R")
source("R/Visualization.R")
source("R/Permutation.R")
source("R/Normalization.R")
load("data/simulatedDataset_diff_OmicsLonDA_normalized_1000.RData", envir = parent.frame(), verbose = FALSE)
points = seq(1, 200, length.out = 200)
head(diff_simulatedDataset_norm[[1]])
output.omicslonda_diff_1 = omicslonda(formula = normalizedCount ~ Time, df = diff_simulatedDataset_norm[[1]], n.perm = 50,
fit.method = "ssgaussian", points = points,
text = "sim_f1", parall = FALSE, pvalue.threshold = 0.05,
adjust.method = "BH", col = c("blue", "green"),
prefix = "OmicsLonDA_clr_f1-2", ylabel = "CLR-NormalizedCount",
DrawTestStatDist = FALSE, time.unit = "days")
version
getwd()
devtools::document()
library(devtools)
intsall.packages("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
install.packages("devtools")
install.packages("pkgbuild")
